{"ast":null,"code":"// frontend-ui/src/api.js\nimport axios from \"axios\";\nconst API = axios.create({\n  // Use REACT_APP_API_URL if defined (from docker-compose env), otherwise fallback to localhost:8000\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8000\"\n});\n\n/**\r\n * Handles user login.\r\n * @param {string} email - The user's email.\r\n * @param {string} password - The user's password.\r\n * @returns {Promise<Object>} - A promise that resolves with login data (e.g., access_token).\r\n */\nexport const login = (email, password) => API.post(\"/login\", {\n  email,\n  password\n}).then(r => r.data);\n\n/**\r\n * Registers a new user.\r\n * @param {string} email - The user's email.\r\n * @param {string} password - The user's password.\r\n * @param {string} phone - The user's phone number.\r\n * @param {string} [telegramChatId] - Optional Telegram chat ID.\r\n * @returns {Promise<Object>} - A promise that resolves with registration status.\r\n */\nexport const registerUser = (email, password, phone, telegramChatId) => API.post(\"/register\", {\n  email,\n  password,\n  phone,\n  telegram_chat_id: telegramChatId\n}).then(r => r.data);\n\n/**\r\n * Verifies the OTP.\r\n * @param {string} email - The user's email.\r\n * @param {string} otp - The OTP code.\r\n * @param {string} [telegramChatId] - Optional Telegram chat ID to link.\r\n * @returns {Promise<Object>} - A promise that resolves with verification status and token.\r\n */\nexport const verifyOtp = (email, otp, telegramChatId) => API.post(\"/verify-otp\", {\n  email,\n  otp,\n  telegram_chat_id: telegramChatId\n}).then(r => r.data);\n\n/**\r\n * Fetches the list of invoices for the authenticated user.\r\n * @param {string} token - The JWT access token for authentication.\r\n * @returns {Promise<Array>} - A promise that resolves with an array of invoice objects.\r\n */\nexport const fetchInvoices = token => API.get(\"/invoices\", {\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}).then(r => r.data);\n\n/**\r\n * Uploads a new invoice image.\r\n * @param {string} token - The JWT access token for authentication.\r\n * @param {File} file - The image file to upload.\r\n * @returns {Promise<Object>} - A promise that resolves with the upload status.\r\n */\nexport const uploadInvoice = (token, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file); // 'file' must match the parameter name in your FastAPI endpoint\n\n  return API.post(\"/upload-invoice\", formData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"multipart/form-data\" // axios automatically sets this with FormData, but good to be explicit\n    }\n  }).then(r => r.data);\n};\n\n//// frontend-ui/src/api.js\n//import axios from \"axios\";\n//\n//const API = axios.create({\n//  // Use REACT_APP_API_URL if defined (from docker-compose env), otherwise fallback to localhost:8000\n//  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8000\",\n//});\n//\n///**\n// * Handles user login.\n// * @param {string} email - The user's email.\n// * @param {string} password - The user's password.\n// * @returns {Promise<Object>} - A promise that resolves with login data (e.g., access_token).\n// */\n//export const login = (email, password) =>\n//  API.post(\"/login\", { email, password }).then(r => r.data);\n//\n///**\n// * Registers a new user.\n// * @param {string} email - The user's email.\n// * @param {string} password - The user's password.\n// * @param {string} phone - The user's phone number.\n// * @param {string} [telegramChatId] - Optional Telegram chat ID.\n// * @returns {Promise<Object>} - A promise that resolves with registration status.\n// */\n//export const registerUser = (email, password, phone, telegramChatId) =>\n//  API.post(\"/register\", { email, password, phone, telegram_chat_id: telegramChatId }).then(r => r.data);\n//\n///**\n// * Verifies the OTP.\n// * @param {string} email - The user's email.\n// * @param {string} otp - The OTP code.\n// * @param {string} [telegramChatId] - Optional Telegram chat ID to link.\n// * @returns {Promise<Object>} - A promise that resolves with verification status and token.\n// */\n//export const verifyOtp = (email, otp, telegramChatId) =>\n//  API.post(\"/verify-otp\", { email, otp, telegram_chat_id: telegramChatId }).then(r => r.data);\n//\n//\n///**\n// * Fetches the list of invoices for the authenticated user.\n// * @param {string} token - The JWT access token for authentication.\n// * @returns {Promise<Array>} - A promise that resolves with an array of invoice objects.\n// */\n//export const fetchInvoices = (token) =>\n//  // Prepend \"Bearer \" to the token for the Authorization header as per OAuth2 standard\n//  API.get(\"/invoices\", { headers: { Authorization: `Bearer ${token}` } }).then(r => r.data);","map":{"version":3,"names":["axios","API","create","baseURL","process","env","REACT_APP_API_URL","login","email","password","post","then","r","data","registerUser","phone","telegramChatId","telegram_chat_id","verifyOtp","otp","fetchInvoices","token","get","headers","Authorization","uploadInvoice","file","formData","FormData","append"],"sources":["C:/Users/Admin/telegram_invoice_manager/frontend-ui/src/api.js"],"sourcesContent":["// frontend-ui/src/api.js\r\nimport axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  // Use REACT_APP_API_URL if defined (from docker-compose env), otherwise fallback to localhost:8000\r\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8000\",\r\n});\r\n\r\n/**\r\n * Handles user login.\r\n * @param {string} email - The user's email.\r\n * @param {string} password - The user's password.\r\n * @returns {Promise<Object>} - A promise that resolves with login data (e.g., access_token).\r\n */\r\nexport const login = (email, password) =>\r\n  API.post(\"/login\", { email, password }).then(r => r.data);\r\n\r\n/**\r\n * Registers a new user.\r\n * @param {string} email - The user's email.\r\n * @param {string} password - The user's password.\r\n * @param {string} phone - The user's phone number.\r\n * @param {string} [telegramChatId] - Optional Telegram chat ID.\r\n * @returns {Promise<Object>} - A promise that resolves with registration status.\r\n */\r\nexport const registerUser = (email, password, phone, telegramChatId) =>\r\n  API.post(\"/register\", { email, password, phone, telegram_chat_id: telegramChatId }).then(r => r.data);\r\n\r\n/**\r\n * Verifies the OTP.\r\n * @param {string} email - The user's email.\r\n * @param {string} otp - The OTP code.\r\n * @param {string} [telegramChatId] - Optional Telegram chat ID to link.\r\n * @returns {Promise<Object>} - A promise that resolves with verification status and token.\r\n */\r\nexport const verifyOtp = (email, otp, telegramChatId) =>\r\n  API.post(\"/verify-otp\", { email, otp, telegram_chat_id: telegramChatId }).then(r => r.data);\r\n\r\n\r\n/**\r\n * Fetches the list of invoices for the authenticated user.\r\n * @param {string} token - The JWT access token for authentication.\r\n * @returns {Promise<Array>} - A promise that resolves with an array of invoice objects.\r\n */\r\nexport const fetchInvoices = (token) =>\r\n  API.get(\"/invoices\", { headers: { Authorization: `Bearer ${token}` } }).then(r => r.data);\r\n\r\n/**\r\n * Uploads a new invoice image.\r\n * @param {string} token - The JWT access token for authentication.\r\n * @param {File} file - The image file to upload.\r\n * @returns {Promise<Object>} - A promise that resolves with the upload status.\r\n */\r\nexport const uploadInvoice = (token, file) => {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file); // 'file' must match the parameter name in your FastAPI endpoint\r\n\r\n  return API.post(\"/upload-invoice\", formData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"multipart/form-data\", // axios automatically sets this with FormData, but good to be explicit\r\n    },\r\n  }).then(r => r.data);\r\n};\r\n\r\n\r\n\r\n//// frontend-ui/src/api.js\r\n//import axios from \"axios\";\r\n//\r\n//const API = axios.create({\r\n//  // Use REACT_APP_API_URL if defined (from docker-compose env), otherwise fallback to localhost:8000\r\n//  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8000\",\r\n//});\r\n//\r\n///**\r\n// * Handles user login.\r\n// * @param {string} email - The user's email.\r\n// * @param {string} password - The user's password.\r\n// * @returns {Promise<Object>} - A promise that resolves with login data (e.g., access_token).\r\n// */\r\n//export const login = (email, password) =>\r\n//  API.post(\"/login\", { email, password }).then(r => r.data);\r\n//\r\n///**\r\n// * Registers a new user.\r\n// * @param {string} email - The user's email.\r\n// * @param {string} password - The user's password.\r\n// * @param {string} phone - The user's phone number.\r\n// * @param {string} [telegramChatId] - Optional Telegram chat ID.\r\n// * @returns {Promise<Object>} - A promise that resolves with registration status.\r\n// */\r\n//export const registerUser = (email, password, phone, telegramChatId) =>\r\n//  API.post(\"/register\", { email, password, phone, telegram_chat_id: telegramChatId }).then(r => r.data);\r\n//\r\n///**\r\n// * Verifies the OTP.\r\n// * @param {string} email - The user's email.\r\n// * @param {string} otp - The OTP code.\r\n// * @param {string} [telegramChatId] - Optional Telegram chat ID to link.\r\n// * @returns {Promise<Object>} - A promise that resolves with verification status and token.\r\n// */\r\n//export const verifyOtp = (email, otp, telegramChatId) =>\r\n//  API.post(\"/verify-otp\", { email, otp, telegram_chat_id: telegramChatId }).then(r => r.data);\r\n//\r\n//\r\n///**\r\n// * Fetches the list of invoices for the authenticated user.\r\n// * @param {string} token - The JWT access token for authentication.\r\n// * @returns {Promise<Array>} - A promise that resolves with an array of invoice objects.\r\n// */\r\n//export const fetchInvoices = (token) =>\r\n//  // Prepend \"Bearer \" to the token for the Authorization header as per OAuth2 standard\r\n//  API.get(\"/invoices\", { headers: { Authorization: `Bearer ${token}` } }).then(r => r.data);\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvB;EACAC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI;AAC5C,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KACnCR,GAAG,CAACS,IAAI,CAAC,QAAQ,EAAE;EAAEF,KAAK;EAAEC;AAAS,CAAC,CAAC,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACN,KAAK,EAAEC,QAAQ,EAAEM,KAAK,EAAEC,cAAc,KACjEf,GAAG,CAACS,IAAI,CAAC,WAAW,EAAE;EAAEF,KAAK;EAAEC,QAAQ;EAAEM,KAAK;EAAEE,gBAAgB,EAAED;AAAe,CAAC,CAAC,CAACL,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;;AAEvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAGA,CAACV,KAAK,EAAEW,GAAG,EAAEH,cAAc,KAClDf,GAAG,CAACS,IAAI,CAAC,aAAa,EAAE;EAAEF,KAAK;EAAEW,GAAG;EAAEF,gBAAgB,EAAED;AAAe,CAAC,CAAC,CAACL,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;;AAG7F;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,aAAa,GAAIC,KAAK,IACjCpB,GAAG,CAACqB,GAAG,CAAC,WAAW,EAAE;EAAEC,OAAO,EAAE;IAAEC,aAAa,EAAE,UAAUH,KAAK;EAAG;AAAE,CAAC,CAAC,CAACV,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,aAAa,GAAGA,CAACJ,KAAK,EAAEK,IAAI,KAAK;EAC5C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC,CAAC,CAAC;;EAE/B,OAAOzB,GAAG,CAACS,IAAI,CAAC,iBAAiB,EAAEiB,QAAQ,EAAE;IAC3CJ,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUH,KAAK,EAAE;MAChC,cAAc,EAAE,qBAAqB,CAAE;IACzC;EACF,CAAC,CAAC,CAACV,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;AACtB,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}