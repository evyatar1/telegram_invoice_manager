{"ast":null,"code":"var _s = $RefreshSig$();\n// frontend-ui/src/components/TaskPoller.js\nimport { useEffect } from \"react\";\nimport { fetchInvoices } from \"../api\";\nexport default function TaskPoller({\n  onUpdate,\n  token\n}) {\n  _s();\n  useEffect(() => {\n    const iv = setInterval(async () => {\n      // It's good practice to ensure token is present before attempting to fetch\n      if (token) {\n        try {\n          const data = await fetchInvoices(token);\n          console.log(\"TaskPoller: Fetched invoices data:\", data); // Debugging log: What fetchInvoices returns\n          onUpdate(data);\n        } catch (error) {\n          console.error(\"TaskPoller: Error fetching invoices:\", error);\n          // You might want to handle this error more gracefully in the UI\n        }\n      } else {\n        console.log(\"TaskPoller: No token available, skipping invoice fetch.\");\n      }\n    }, 5000); // Poll every 5 seconds\n    return () => clearInterval(iv); // Cleanup on unmount\n  }, [onUpdate, token]); // Re-run effect if onUpdate or token changes\n  return null; // This component doesn't render anything visible\n}\n\n//// polls invoice list every 5s\n//import { useEffect } from \"react\";\n//import { fetchInvoices } from \"../api\"; // <-- THIS LINE IS CRUCIAL AND NEEDS TO BE ADDED\n//\n//export default function TaskPoller({ onUpdate, token }) {\n//  useEffect(() => {\n//    const iv = setInterval(async () => {\n//      // It's good practice to ensure token is present before attempting to fetch\n//      if (token) {\n//        try {\n//          const data = await fetchInvoices(token);\n//          onUpdate(data);\n//        } catch (error) {\n//          console.error(\"Error fetching invoices:\", error);\n//          // You might want to handle this error more gracefully in the UI\n//        }\n//      }\n//    }, 5000);\n//    return () => clearInterval(iv);\n//  }, [onUpdate, token]);\n//  return null;\n//}\n_s(TaskPoller, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = TaskPoller;\nvar _c;\n$RefreshReg$(_c, \"TaskPoller\");","map":{"version":3,"names":["useEffect","fetchInvoices","TaskPoller","onUpdate","token","_s","iv","setInterval","data","console","log","error","clearInterval","_c","$RefreshReg$"],"sources":["C:/Users/Admin/telegram_invoice_manager/frontend-ui/src/components/TaskPoller.js"],"sourcesContent":["// frontend-ui/src/components/TaskPoller.js\r\nimport { useEffect } from \"react\";\r\nimport { fetchInvoices } from \"../api\";\r\n\r\nexport default function TaskPoller({ onUpdate, token }) {\r\n  useEffect(() => {\r\n    const iv = setInterval(async () => {\r\n      // It's good practice to ensure token is present before attempting to fetch\r\n      if (token) {\r\n        try {\r\n          const data = await fetchInvoices(token);\r\n          console.log(\"TaskPoller: Fetched invoices data:\", data); // Debugging log: What fetchInvoices returns\r\n          onUpdate(data);\r\n        } catch (error) {\r\n          console.error(\"TaskPoller: Error fetching invoices:\", error);\r\n          // You might want to handle this error more gracefully in the UI\r\n        }\r\n      } else {\r\n        console.log(\"TaskPoller: No token available, skipping invoice fetch.\");\r\n      }\r\n    }, 5000); // Poll every 5 seconds\r\n    return () => clearInterval(iv); // Cleanup on unmount\r\n  }, [onUpdate, token]); // Re-run effect if onUpdate or token changes\r\n  return null; // This component doesn't render anything visible\r\n}\r\n\r\n//// polls invoice list every 5s\r\n//import { useEffect } from \"react\";\r\n//import { fetchInvoices } from \"../api\"; // <-- THIS LINE IS CRUCIAL AND NEEDS TO BE ADDED\r\n//\r\n//export default function TaskPoller({ onUpdate, token }) {\r\n//  useEffect(() => {\r\n//    const iv = setInterval(async () => {\r\n//      // It's good practice to ensure token is present before attempting to fetch\r\n//      if (token) {\r\n//        try {\r\n//          const data = await fetchInvoices(token);\r\n//          onUpdate(data);\r\n//        } catch (error) {\r\n//          console.error(\"Error fetching invoices:\", error);\r\n//          // You might want to handle this error more gracefully in the UI\r\n//        }\r\n//      }\r\n//    }, 5000);\r\n//    return () => clearInterval(iv);\r\n//  }, [onUpdate, token]);\r\n//  return null;\r\n//}\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,aAAa,QAAQ,QAAQ;AAEtC,eAAe,SAASC,UAAUA,CAAC;EAAEC,QAAQ;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACtDL,SAAS,CAAC,MAAM;IACd,MAAMM,EAAE,GAAGC,WAAW,CAAC,YAAY;MACjC;MACA,IAAIH,KAAK,EAAE;QACT,IAAI;UACF,MAAMI,IAAI,GAAG,MAAMP,aAAa,CAACG,KAAK,CAAC;UACvCK,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,IAAI,CAAC,CAAC,CAAC;UACzDL,QAAQ,CAACK,IAAI,CAAC;QAChB,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;UAC5D;QACF;MACF,CAAC,MAAM;QACLF,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;MACxE;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACV,OAAO,MAAME,aAAa,CAACN,EAAE,CAAC,CAAC,CAAC;EAClC,CAAC,EAAE,CAACH,QAAQ,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EACvB,OAAO,IAAI,CAAC,CAAC;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,CA3CwBH,UAAU;AAAAW,EAAA,GAAVX,UAAU;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}