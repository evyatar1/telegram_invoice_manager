version: '3.8'

services:
  db:
    image: postgres:15
    container_name: telegram_invoice_manager-db-1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: appdb
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./databases/app-db:/docker-entrypoint-initdb.d # This mounts your init.sql
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  broker:
    image: bitnami/kafka:3.4.0
    container_name: broker
    ports:
      - "9092:9092" # Client listener
      - "9093:9093" # Controller listener
    environment:
      # KRaft mode configuration
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@broker:9093 # Node ID @ Host:Port
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092 # How clients connect
      ALLOW_PLAINTEXT_LISTENER: "yes" # Required for PLAINTEXT listener

      # Data persistence for Kafka's KRaft metadata
      KAFKA_CFG_LOG_DIRS: /tmp/kraft-storage

      # Increased internal Kafka heartbeat and session timeouts
      KAFKA_CFG_BROKER_HEARTBEAT_INTERVAL_MS: 5000 # Default is 2000ms
      KAFKA_CFG_BROKER_SESSION_TIMEOUT_MS: 15000 # Default is 9000ms
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"] # Check if Kafka can list topics
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 300s # CRITICAL: Increased to 300 seconds (5 minutes) for startup
    deploy: # Allocate more resources to Kafka (if your machine can provide them)
      resources:
        limits:
          cpus: '1.0' # Allocate 1 full CPU core
          memory: 1G # Allocate 1 GB of RAM

  # Service for initializing Kafka topics (e.g., 'invoice-processing-topic')
  kafka-init:
    image: bitnami/kafka:3.4.0 # Use the same Kafka image
    container_name: kafka-topic-initializer
    volumes:
      # Mount a script to create topics. Ensure this script exists and is executable.
      - ./init-kafka-topics.sh:/usr/local/bin/init-kafka-topics.sh:ro
    command: ["bash", "/usr/local/bin/init-kafka-topics.sh"]
    depends_on:
      broker:
        condition: service_healthy # Wait for broker to be healthy before creating topics
    networks:
      - app-network
    restart: "no" # This is a one-off task, it should not restart after completion

  api-server:
    build:
      context: .
      dockerfile: ./api-server/Dockerfile
    container_name: telegram_invoice_manager-api-server-1
    env_file: ./api-server/.env
    ports:
      - "8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway" # Allows frontend to connect to backend on host
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready
      broker:
        condition: service_healthy # Ensure Kafka broker is ready
      kafka-init:
        condition: service_completed_successfully # Ensure Kafka topics are created
    networks:
      - app-network

  worker:
    build:
      context: .
      dockerfile: ./logic-worker/Dockerfile
    container_name: telegram_invoice_manager-worker-1
    env_file: ./logic-worker/.env
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    restart: on-failure
    networks:
      - app-network


  telegram-bot:
    build:
      context: .
      dockerfile: ./telegram-bot/Dockerfile
    container_name: telegram_invoice_manager-telegram-bot-1
    env_file: ./telegram-bot/.env
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
      api-server:
        condition: service_started # Bot needs API server to be running for login
      kafka-init: # NEW: Depends on kafka-init to ensure topics exist
        condition: service_completed_successfully
    restart: on-failure
    networks:
      - app-network
    # REMOVED the 'command' line that was causing the error
    # command: ["/usr/local/bin/wait-for-it.sh", "db:5432", "--", "/usr/local/bin/wait-for-it.sh", "broker:9092", "--", "/usr/local/bin/wait-for-it.sh", "api-server:8000", "--", "python", "-u", "main.py"]

  frontend:
    build: ./frontend-ui
    container_name: telegram_invoice_manager-frontend-1
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000 # Frontend connects to API server
    depends_on:
      - api-server # Ensure API server is up before frontend starts
    networks:
      - app-network

volumes:
  db-data: # Volume for PostgreSQL data persistence
  # kafka-data: # Uncomment if you want Kafka data persistence (requires KAFKA_CFG_LOG_DIRS to point here)

networks:
  app-network:
    driver: bridge
